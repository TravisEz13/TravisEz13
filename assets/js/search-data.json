{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "http://fastpages.ez13.net/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Want to secure credentials in Windows PowerShell Desired State Configuration?",
            "content": "Introduction . As you start using Windows PowerShell Desired State Configuration (DSC), you might need to specify credentials for resources. In a previous post we showed you how to define a resource that has a credential property. In this post, I’ll discuss how to properly encrypt credentials when used in a DSC configuration. . Prerequisites . First, let us discuss the requirements to encrypt a DSC configuration. . You must have an Encryption capable certificate on the target node in the Local Computer’s Personal Store (in PowerShell the path to the store is Cert: LocalMachine My, we used the workstation authentication template, see all templates here.) | If you are running the configuration, from a separate machine than the target node, you must export the public key of the certificate and import it on the machine you will be running the configuration from. It is important that you keep the private key secure. Since the public key is all that is needed to encrypt, I recommend you only export the public key to the machine you are writing your configurations on in order to keep the private key more secure. | . | . #Assumptions For this article I’m going to assume: . You are using something like Active Directory Certificate Authority to issue and distribute the encryption certificates. | Administrator access to the target node must be properly secured, as anyone with administrator access to the target node should be trusted with the credentials as the administrators can decrypt the credentials with enough effort. | . Overview . In order to encrypt credentials in a DSC configuration, you must follow a process. You must have a certificate on each target node which supports encryption. After that, you must have the public key and thumbprint of the certificate on the machine you are authoring the configuration on. The public key must be provided using the configuration data, and I’ll show you how to provide the thumbprint using configuration data as well. You must write a configuration script which configures the machine using the credentials, and sets up decryption by configuring the target node’s Local Configuration Manager (LCM) to decrypt the configuration using the encryption certificate as identified by its thumbprint. Finally, you must run the configuration, including, setting the LCM settings and starting the DSC configuration. . Configuration Data . When dealing with encryption of DSC configuration, you must understand DSC configuration data. This structure describes, to a configuration, the list of nodes to be operated on, if credentials in a configuration should be encrypted or not for each node, how credential will be encrypted, and other information you want to include. Below is an example of configuration data for a machine named targetNode, which I’d like to encrypt using a public key I’ve exported and saved to C: publicKeys targetNode.cer. . $ConfigData= @{ AllNodes = @( @{ # The name of the node we are describing NodeName = “targetNode” # The path to the .cer file containing the # public key of the Encryption Certificate # used to encrypt credentials for this node CertificateFile = “C: publicKeys targetNode.cer” # The thumbprint of the Encryption Certificate # used to decrypt the credentials on target node Thumbprint = “AC23EA3A9E291A75757A556D0B71CBBF8C4F6FD8″ }; ); } . Configuration Script . After we have the configuration data, we can start building our configuration. Since credential are important to keep secure, you should always take the credential as a parameter to your configuration. This is so the credentials are stored for the shortest time possible. Below I’ll give an example of copying a file from a share that is secured to a user. . configuration CredentialEncryptionExample { param( [Parameter(Mandatory=$true)] [ValidateNotNullorEmpty()] [PsCredential] $credential ) Node $AllNodes.NodeName { File exampleFile { SourcePath = “ Server share path file.ext” DestinationPath = “C: destinationPath” Credential = $credential } } } . When you run CredentialEncryptionExample, DSC will prompt your for the credential and encrypt the mof using the CertificateFile associated with the node in the configuration data. . Setting up Decryption . There is still one issue. When you run Start-DscConfiguration, the Local Configuration Manager (LCM) of target node does not know which certificate to use to decrypt the credentials. We need to add a LocalConfigurationManager resource to tell it. You must set the CertificateId to the thumbprint of the certificate. The first question becomes how to get the thumbprint. Below is an example of how to find a local certificate that would work for encryption (you may need to customize this to find the exact certificate you want to use.) . # Get the certificate that works for encryption function Get-LocalEncryptionCertificateThumbprint { (dir Cert: LocalMachine my) | %{ # Verify the certificate is for Encryption and valid if ($_.PrivateKey.KeyExchangeAlgorithm -and $_.Verify()) { return $_.Thumbprint } } } . After we have the thumbprint, we use this to build the configuration data (given in the above configuration data example.) Below is an example of the updated configuration with the LocalConfigurationManager resource, getting the value from the node in the configuration data. . configuration CredentialEncryptionExample { param( [Parameter(Mandatory=$true)] [ValidateNotNullorEmpty()] [PsCredential] $credential ) Node $AllNodes.NodeName { File exampleFile { SourcePath = “ Server share path file.ext” DestinationPath = “C: destinationPath” Credential = $credential } LocalConfigurationManager { CertificateId = $node.Thumbprint } } } . Running the Configuration . From this point, we need to run the configuration, it will output one *.meta.mof to configure LCM to decrypt the credentials using the certificate installed to the local machine store identified by the thumbprint, and one mof to apply the configuration. First, you will need to use Set-DscLocalConfigurationManager to apply the *.meta.mof and then, Start-DscConfiguration to apply the configuration. Here is an example of how you would run this: . Write-Host “Generate DSC Configuration…” CredentialEncryptionExample -ConfigurationData $ConfigData -OutputPath . CredentialEncryptionExample Write-Host “Setting up LCM to decrypt credentials…” Set-DscLocalConfigurationManager . CredentialEncryptionExample -Verbose Write-Host “Starting Configuration…” Start-DscConfiguration . CredentialEncryptionExample -wait -Verbose . This example would push the configuration to the target node. If you reference our blog on how to setup a pull configuration, you can modify the setting in the LocalConfigurationManager resource and use these steps to deploy this using a pull server. . Summary . You should be able to build a sample that uses credentials securely in DSC using the information in this post. I have written a more complete sample and have attached the code here: . CredentialSample.psm1 . The sample expands on what we discussed here and includes a helper cmdlet to export and copy the public keys to the local machine and an example how to use it. . Travis Plunk . Windows PowerShell DSC Test .",
            "url": "http://fastpages.ez13.net/dsc/2014/01/21/Secure-dsc-cred.html",
            "relUrl": "/dsc/2014/01/21/Secure-dsc-cred.html",
            "date": " • Jan 21, 2014"
        }
        
    
  
    
        ,"post2": {
            "title": "Installing WSUS on Windows Server “8” Beta using PowerShell",
            "content": "Originally posted on Technet. . Authors: . Travis Plunk, Software Developer Engineer | Yuri Diogenes, Senior Technical Writer | . Technical Reviewers: . Cecilia Cole, Program Manager | . In our previous post, we demonstrated how to install the WSUS Role on the Windows Server “8” Beta using the new Server Manager. In this post you will learn how to perform the same task using PowerShell. . To install WSUS on Windows Server “8” Beta using PowerShell, follow the steps below: . Sign in on Windows Server “8” Beta . | On the taskbar click Windows PowerShell button. . | In the PowerShell Console type Install-WindowsFeature -Name UpdateServices, UpdateServices-Ui and press ENTER. . | The installation process will start and a progress counter will appear on the screen. Wait until the installation reaches 100% and you receive a message that the installation succeeded before moving on to the next step. . | Type &amp; &#39;C: Program Files Update Services Tools WsusUtil.exe&#39; postinstall contentdir=C: Mycontent and press ENTER. . | Wait until you receive the message that the post installation successfully finished. . | Type Exit and press ENTER to leave the PowerShell interface. . | At this point the WSUS installation is completed and you may launch the WSUS Console using the Tools menu. When you launch WSUS for the first time the WSUS Configuration Wizard will appear. For more information about how to configure WSUS, read Step 3: Configure WSUS in the Deploying Windows Server Updates Services in the Organization article at the TechNet Library. . If you want to perform the full installation and post installation tasks using PowerShell you should run this script once you finish the installation via PowerShell. . Stay tuned for more exciting stuff on this blog and the Windows Server Blog from the server leadership team. .",
            "url": "http://fastpages.ez13.net/wsus/2012/03/20/wsus-install-win-8-preview.html",
            "relUrl": "/wsus/2012/03/20/wsus-install-win-8-preview.html",
            "date": " • Mar 20, 2012"
        }
        
    
  
    
        ,"post3": {
            "title": "Best Practices for Securing WSUS with SSL",
            "content": "Introduction . One of the questions that always come up during the planning phase of WSUS is how to secure the communication between WSUS and the clients. The general guidelines for this deployment are documented at Securing WSUS with the Secure Sockets Layer Protocol article and you should always read it first. The goal of this article is to extent this list and highlight additional considerations that you should take while planning this type of deployment. . Additional Considerations while Deploying WSUS with SSL . Use an FQDN wherever you refer to the WSUS server, including the common name used to create the SSL Certificate even on an intranet. | Require SSL so that you know your connections are secure. | Use a certificate chained to already known trusted root, issued from a certificate authority that maintains CRL (in case your certificate becomes compromised). | . Consider the Algorithm and Certificate Key length of the certificate you are using: . “The National Institute of Standards and Technology (NIST) has issued a statement that says SSL certificates with a key length of 1,024 bits or fewer will be insufficient for security after December 31, 2010, because NIST estimates that computers will be powerful enough to perform a brute-force crack of keys of that size.” BROKEN - Windows IT Pro - Are yur SSL certificates Secure | The research … has the specific purpose of convincing Certification Authorities to drop MD5 and move on to more secure algorithms, such as SHA-1, SHA-2, or the upcoming SHA-3. SoftPedia - SSL Security Broken | .",
            "url": "http://fastpages.ez13.net/wsus/2011/08/12/wsus-best-practices.html",
            "relUrl": "/wsus/2011/08/12/wsus-best-practices.html",
            "date": " • Aug 12, 2011"
        }
        
    
  
    
        ,"post4": {
            "title": "Guidance about WSUS on a Domain Controller",
            "content": "Originally posted on TechNet . Introduction . A common question that comes up during WSUS planning phase is if WSUS is supported on when installed on a Domain Controller. Although this is documented in TechNet in various locations, it is important to highlight some additional recommendations as well as enumerate the main source of documentation for that. The goal of this article is to consolidate the Guidance on running WSUS on a Domain Controller. . Additional Considerations for Domain Controllers and WSUS . The best practice is to not run WSUS on a Domain Controller. “If WSUS is installed a domain controller, this will cause database access issues due to how the database is configured.” This is documented in this best practice article. | “You cannot use a server configured as a domain controller for the back end of the remote SQL pair.” This is documented in the Deployment Guide. | “When you Configure WSUS for Network Load Balancing, none of the servers taking part in the cluster should be a front-end domain controller.” This is documented in the Deployment Guide. | If someone unfamiliar with Domain Controllers is troubleshooting a WSUS and removes the Windows Internal Database, this would be catastrophic to the domain. | It is important to emphasize that by adding another critical role (such as patch management) on the Domain Controller you increase the overall impact in case this server goes offline for any reason. | Separation of server roles is a vital recommendation for high availability scenarios. For this reason, consider server virtualization, where each server role will be in a different virtual machine. | . Thanks to Rob Coffey and Yuri Diogenes for his help with this Article. .",
            "url": "http://fastpages.ez13.net/wsus/2011/08/06/wsus-dc-best-practices.html",
            "relUrl": "/wsus/2011/08/06/wsus-dc-best-practices.html",
            "date": " • Aug 6, 2011"
        }
        
    
  
    
        ,"post5": {
            "title": "Finding machines not compliant with a specific security bulletin",
            "content": "Finding machines not compliant with a specific security bulletin . Originally posted on TechNet. . I read Marc’s BROKEN - post about Compliance Reporting and it was similar to a problem I deal with in my job. Part of my job is to run Update Management on one of the domains consisting of around 12,000 managed computers at Microsoft using WSUS. We do this in order to validate WSUS (and similar products) in an environment with real users. Another group at Microsoft audits my compliance, and often request a list of non-compliant machines for specific security bulletins. I have adapted Marc’s SQL script to do just that. . I ran into one issue, Marc’s SQL script will blocks clients from scanning while it runs. Since the script can take a long time to execute on larger data sets, I decided to allow SQL to read dirty data and unblock my clients (SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED.). . I hope you find this useful. . Travis Plunk . Software Design Engineer in Test II, WSUS . -- Find computers within a target group that need a security bulletin USE SUSDB go SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED GO DECLARE @TargetGroup nvarchar(30) DECLARE @Bulletin nvarchar(9) SELECT @TargetGroup = &#39;All Computers&#39; SELECT @Bulletin = &#39;MS08-030&#39; -- Find the computers not compliant for each security bulletin in the given @TargetGroup -- where the approved occured between @Days and @DaysEnd days ago SELECT ct.Name,@Bulletin as Bulletin,ct.LastReportedStatusTime FROM PUBLIC_VIEWS.vComputerGroupMembership as cgm INNER JOIN PUBLIC_VIEWS.vComputerTarget as ct ON cgm.ComputerTargetId = ct.ComputerTargetId INNER JOIN PUBLIC_VIEWS.vComputerTargetGroup as ctg ON cgm.ComputerTargetGroupId = ctg.ComputerTargetGroupId WHERE (ctg.Name = @TargetGroup) -- And only select those for which an update is approved for install, the -- computer status for that update is either 2 (not installed), 3 (downloaded), -- 5 (failed), or 6 (installed pending reboot), and -- the update bulletin is the one provided. AND EXISTS (SELECT 1 FROM PUBLIC_VIEWS.vUpdateEffectiveApprovalPerComputer as ueapc INNER JOIN PUBLIC_VIEWS.vUpdateApproval as ua ON ua.UpdateApprovalId = ueapc.UpdateApprovalId INNER JOIN PUBLIC_VIEWS.vUpdateInstallationInfoBasic uiib ON uiib.ComputerTargetId = ct.ComputerTargetId AND ua.UpdateId = uiib.UpdateId inner join PUBLIC_VIEWS.vUpdate as u on ua.updateid=u.updateId WHERE (ueapc.ComputerTargetId = ct.ComputerTargetId) AND (ua.Action = &#39;Install&#39;) AND (uiib.State IN (2, 3, 5, 6)) AND u.securityBulletin is not null and u.securityBulletin=@Bulletin ) .",
            "url": "http://fastpages.ez13.net/wsus/2008/07/07/Wsus-reporting.html",
            "relUrl": "/wsus/2008/07/07/Wsus-reporting.html",
            "date": " • Jul 7, 2008"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m Travis Plunk. I’m a Senior Software Engineer at Microsoft. I’ve worked at Microsoft for over 19+ years. I’ve worked on Commerce Server, Windows Update, Windows Server Update Service, PowerShell Desired State Configuration and currently working on PowerShell Core. . Blog Posts | .",
          "url": "http://fastpages.ez13.net/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "http://fastpages.ez13.net/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}